#!/bin/bash

# --- Configurations ---
TERMUX_ROOT="termux-root-packages"
CACHE_FILE="$HOME/.expkg_cache"
LOG_FILE="$HOME/.expkg_log"
CONFIG_FILE="$HOME/.expkg_conf"
REPO_LIST_FILE="$HOME/.expkg_repos"

# --- Colors ---
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
CYAN="\033[36m"
RESET="\033[0m"
BOLD="\033[1m"

# --- Helper Functions ---
function log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >>"$LOG_FILE"
}

function print_verbose() {
    echo -e "${YELLOW}[INFO]${RESET} $1"
    log "[INFO] $1"
}

function print_success() {
    echo -e "${GREEN}[SUCCESS]${RESET} $1"
    log "[SUCCESS] $1"
}

function print_error() {
    echo -e "${RED}[ERROR]${RESET} $1"
    log "[ERROR] $1"
}

# --- Caching ---
function cache_packages() {
    print_verbose "Caching package list locally"
    curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/termux/termux-root-packages/contents/packages" |
        jq -r '.[] | select(.type == "dir") | .name' >"$CACHE_FILE"
    print_success "Package list cached"
}

function clean_cache() {
    print_verbose "Cleaning package cache"
    rm -f "$CACHE_FILE"
    print_success "Package cache cleaned"
}

function read_cache() {
    if [[ ! -f $CACHE_FILE ]]; then
        print_error "Package cache is empty or not found. Run 'expkg cache' to refresh."
        exit 1
    fi
    cat "$CACHE_FILE"
}

# --- Dependency Management ---
function install_dependencies() {
    local deps="$1"
    if [[ -z $deps ]]; then
        print_error "No dependencies provided for installation"
        return 1
    fi

    print_verbose "Installing dependencies..."
    for dep in $(echo "$deps" | jq -r '.[].name'); do
        print_verbose "Installing $dep"

        local manager="$(echo "$dep" | grep -o '^[^:]*')"
        local package_name="$(echo "$dep" | sed 's/^[^:]*://')"

        case "$manager" in
            pip)
                print_verbose "Using pip to install $package_name"
                pip install "$package_name"
                ;;
            npm)
                print_verbose "Using npm to install $package_name"
                npm install "$package_name"
                ;;
            pacman)
                print_verbose "Using pacman to install $package_name"
                pacman -S "$package_name" --noconfirm
                ;;
            apt)
                print_verbose "Using apt to install $package_name"
                apt install "$package_name" -y
                ;;
            pkg)
                print_verbose "Using pkg to install $package_name"
                pkg install "$package_name" -y
                ;;
            *)
                print_error "Unsupported package manager '$manager' for package '$package_name'"
                return 1
                ;;
        esac
    done
    print_success "Dependencies installed"
}

# --- Custom Repository Management ---
function validate_repo_manifest() {
    local manifest="$1"

    # Check if file contains @define-repo
    if ! grep -q "^@define-repo" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '@define-repo'."
        return 1
    fi

    # Check for essential keys <$name>, <$reference>, <$description>
    if ! grep -q "<\\$name>" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '<$name>'."
        return 1
    fi
    if ! grep -q "<\\$reference>" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '<$reference>'."
        return 1
    fi
    if ! grep -q "<\\$description>" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '<$description>'."
        return 1
    fi

    # Check for dependencies block
    if ! grep -q "%dependencies {" <<<"$manifest"; then
        print_verbose "No dependencies block found; proceeding without it."
        return 0
    fi

    # Validate each dependency category (pip, npm, etc.)
    dependencies=$(sed -n '/%dependencies {/,/}/p' <<<"$manifest" | sed '/%dependencies {/{h;d};H;$!d;g')
    if [[ ! "$dependencies" =~ "<pip>" ]] && [[ ! "$dependencies" =~ "<npm>" ]] && \
       [[ ! "$dependencies" =~ "<pacman>" ]] && [[ ! "$dependencies" =~ "<apt>" ]] && \
       [[ ! "$dependencies" =~ "<pkg>" ]]; then
        print_verbose "No recognized dependency types found. Proceeding."
    fi

    print_success "Repository manifest validated."
    return 0
}

function add_repo() {
    local repo_url="$1"

    # Check if the URL is provided
    if [ -z "$repo_url" ]; then
        print_error "No repository URL provided."
        return 1
    fi

    print_verbose "Fetching repository manifest from $repo_url..."

    # Clone the repository to a temporary location
    temp_dir=$(mktemp -d)
    git clone "$repo_url" "$temp_dir" > /dev/null 2>&1

    # Check if the repository contains a list.pkgrepo file
    if [ ! -f "$temp_dir/list.pkgrepo" ]; then
        print_error "Invalid repository: 'list.pkgrepo' file not found in the repository."
        rm -rf "$temp_dir"
        return 1
    fi

    print_success "Repository fetched successfully."

    # Read the contents of the list.pkgrepo file
    repo_manifest=$(cat "$temp_dir/list.pkgrepo")

    # Validate the repository manifest
    validate_repo_manifest "$repo_manifest"
    if [ $? -ne 0 ]; then
        print_error "Repository manifest validation failed."
        rm -rf "$temp_dir"
        return 1
    fi

    # Extract dependencies from the manifest
    dependencies=$(echo "$repo_manifest" | grep -oP '%dependencies\s*{.*?}' | sed 's/%dependencies\s*{\(.*\)}/\1/' )

    if [ -n "$dependencies" ]; then
        print_success "The repository contains the following dependencies:"
        echo "$dependencies"

        # Ask user if they want to install dependencies
        print_prompt "Would you like to install these dependencies? (y/n)"
        read -r install_deps_choice

        if [[ "$install_deps_choice" =~ ^[Yy]$ ]]; then
            # Install the dependencies
            install_dependencies "$dependencies"
        fi
    fi

    # Clean up the temporary directory
    rm -rf "$temp_dir"

    print_success "Repository $repo_url added successfully."
    return 0
}

function validate_repo_manifest() {
    local manifest="$1"

    # Ensure @define-repo exists in the manifest
    if ! grep -q "^@define-repo" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '@define-repo'."
        return 1
    fi

    # Ensure the repo has <$name>, <$reference>, and <$description>
    if ! grep -q "<\$name>" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '<\$name>'."
        return 1
    fi
    if ! grep -q "<\$reference>" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '<\$reference>'."
        return 1
    fi
    if ! grep -q "<\$description>" <<<"$manifest"; then
        print_error "Invalid repository manifest. Missing '<\$description>'."
        return 1
    fi

    print_success "Repository manifest validated successfully."
    return 0
}

function install_dependencies() {
    local dependencies="$1"

    # Process each dependency
    IFS=' ' read -ra DEPENDENCIES <<< "$dependencies"
    for dep in "${DEPENDENCIES[@]}"; do
        dep=$(echo "$dep" | sed 's/^\$//')  # Remove any leading '$'
        print_verbose "Installing dependency: $dep"
        install_dependency "$dep"
    done
}

function install_dependency() {
    local dep="$1"

    # Install dependencies for various package managers
    if command -v pip > /dev/null; then
        pip install "$dep"
    elif command -v npm > /dev/null; then
        npm install "$dep"
    elif command -v apt > /dev/null; then
        sudo apt install "$dep" -y
    elif command -v pkg > /dev/null; then
        pkg install "$dep" -y
    elif command -v pacman > /dev/null; then
        sudo pacman -S "$dep" --noconfirm
    else
        print_error "No supported package manager found to install $dep."
    fi
}


function list_repositories() {
    if [[ ! -f $REPO_LIST_FILE ]]; then
        print_error "No repositories found. Add one using 'expkg add <repo_url>'."
        return 1
    fi
    cat "$REPO_LIST_FILE"
}

# --- Package Operations ---
function install_package() {
    local pkg_name="$1"
    if [[ -z $pkg_name ]]; then
        print_error "Package name is required for installation"
        return 1
    fi

    local pkg_dir="$TERMUX_ROOT/packages/$pkg_name"
    if [[ ! -d $pkg_dir ]]; then
        print_error "Package '$pkg_name' not found"
        return 1
    fi

    print_verbose "Installing package: $pkg_name"
    cd "$TERMUX_ROOT" && ./start-builder.sh ./build-package.sh "$pkg_name" >/dev/null
    if [[ $? -eq 0 ]]; then
        print_success "Package '$pkg_name' installed successfully"
    else
        print_error "Failed to install package '$pkg_name'"
    fi
}

function list_packages() {
    read_cache
}

function uninstall_package() {
    local pkg_name="$1"
    if [[ -z $pkg_name ]]; then
        print_error "Package name is required for uninstallation"
        return 1
    fi

    local pkg_dir="$TERMUX_ROOT/packages/$pkg_name"
    if [[ ! -d $pkg_dir ]]; then
        print_error "Package '$pkg_name' not found"
        return 1
    fi

    print_verbose "Uninstalling package: $pkg_name"
    rm -rf "$pkg_dir"
    print_success "Package '$pkg_name' uninstalled"
}

function upgrade_system() {
    print_verbose "Upgrading system..."
    pkg update && pkg upgrade -y
    print_success "System upgraded"
}

# --- Command Handling ---
command="$1"
shift

case $command in
install)
    install_package "$@"
    ;;
list)
    list_packages
    ;;
add)
    add_repository "$@"
    ;;
repos)
    list_repositories
    ;;
cache)
    cache_packages
    ;;
clean)
    clean_cache
    ;;
uninstall)
    uninstall_package "$@"
    ;;
upgrade)
    upgrade_system
    ;;
*)
    echo -e "${CYAN}Usage:${RESET} expkg <command> [options]"
    echo -e "${CYAN}Commands:${RESET}"
    echo -e "  ${GREEN}install <package>${RESET}     Install a package"
    echo -e "  ${GREEN}list${RESET}                  List cached packages"
    echo -e "  ${GREEN}add <repo_url>${RESET}        Add a custom repository"
    echo -e "  ${GREEN}repos${RESET}                 List custom repositories"
    echo -e "  ${GREEN}cache${RESET}                 Refresh package cache"
    echo -e "  ${GREEN}clean${RESET}                 Clear package cache"
    echo -e "  ${GREEN}uninstall <package>${RESET}   Uninstall a package"
    echo -e "  ${GREEN}upgrade${RESET}               Upgrade the system"
    ;;
esac
